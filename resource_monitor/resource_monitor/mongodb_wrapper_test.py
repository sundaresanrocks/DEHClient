import mongodb_wrapper
from app import app
from datetime import datetime
import pytz

mongo_client = mongodb_wrapper.MongoAPI(hostname=app.config['mongo_host'],
                                             port=app.config['mongo_port'],
                                             database=app.config['mongo_db'],
                                             collection="events")

def db_check_resource_registration(resource_id, check_for="ALL"):
    # Read DB if the resource data is already persisted. If exists update record
    documents = mongo_client.read({"_id": resource_id})
    if documents:
        print(documents)
        for document in documents:
            print(document)
    return

def manage_write_metrics_to_db(self, individual_metric):
    """
    Format the metrics generated by metrics_handler to the desired DataModel recommended by RRM & publish the data
    Implemented : Updates the DB
    Future : POST to RRM Consumer API
    """
    print(individual_metric)
    utc_current_datetime = datetime.now(pytz.timezone("UTC"))
    utc_current_datetime_str = utc_current_datetime.strftime("%Y-%m-%d %H:%M:%S %Z%z")
    for i in individual_metric:
        resource_id = individual_metric[i]['info']['container_id']
        current_cpu_percent = individual_metric[i]['Volume']['cpu']['cpu_percent']
        current_mem_percent = individual_metric[i]['Volume']['mem']['mem_percent']
        uptime = individual_metric[i]['Uptime']
        hostname = individual_metric[i]['HostName']
        resource_name = individual_metric[i]['ResourceID']
        ip = individual_metric[i]['IP']
        bse_id = individual_metric[i]['BSE_ID']
        uid = individual_metric[i]['RRM_ID']
        updated_cpu_present = {"time_stamp": utc_current_datetime_str,
                               "cpu_percent": current_cpu_percent}
        updated_mem_present = {"time_stamp": utc_current_datetime_str,
                               "cpu_percent": current_mem_percent}

        # Read DB if the resource data is already persisted. If exists update record
        documents = self.mongo_client.read({"_id": resource_id})
        if documents:
            formatted_data = {}
            for document in documents:
                cpu_update = self.mongo_client.update_array(resource_id, "cpu_percent", updated_cpu_present,
                                                            "cpu_percent")
                mem_update = self.mongo_client.update_array(resource_id, "mem_percent", updated_mem_present,
                                                            "mem_percent")

                # If rrm_id & bse_id generated after record persisted in mongodb, update the same.
                mongo_bse_id = document['BSE_ID']
                mongo_uid = document['RRM_ID']
                if mongo_uid is None:
                    uid = individual_metric[i]['RRM_ID']
                if mongo_bse_id is None:
                    bse_id = individual_metric[i]['BSE_ID']

                self.mongo_client.update_one(resource_id, {"RRM_ID": uid, "BSE_ID": bse_id})

        # If new resource create a new record/ document
        else:

            # Writing to DB
            formatted_data = {"_id": resource_id,
                              "uptime": uptime,
                              "hostname": hostname,
                              "ip": ip,
                              "image": "",
                              "BSE_ID": bse_id,
                              "RRM_ID": uid,
                              "lastupdated": utc_current_datetime_str,
                              "cpu_percent": [updated_cpu_present],
                              "mem_percent": [updated_mem_present]}
            write = self.mongo_client.write(formatted_data)


event_data = {'_id': '51b2ce1979e811a5cfe6381188b76b4faa89a524c11e13639e03061588bb349d',
              'metadata': {'container': 'estimate-animal-welfare-condition-demo2',
                           'image': 'demeterengteam/estimate-animal-welfare-condition:candidate',
                           'type': 'container',
                           'id': '51b2ce1979e811a5cfe6381188b76b4faa89a524c11e13639e03061588bb349d',
                           'imageId': 'sha256:d839056da4b5daaf823175dcdc2a381c539881a96e47c9113b32ccd0f9620c74'},
              'events': [{'eventTimestamp': '2025-04-20 15:42:50 UTC+0000',
                          'description': 'container created',
                          'namespace': 'ResourceMonitor',
                          'severity': 'Clear',
                          'event': 'create',
                          'time': 1318933370,
                          'timeNano': 111111111111111111111111111,
                          'status': 'create',
                          'Action': 'create',
                          'exitCode': 'NA'}]
              }


def convert_posix_to_string(posix_timestamp):
    """
    localizing epoch-time with pytz in python
    """
    utc_dt = datetime.utcfromtimestamp(posix_timestamp).replace(tzinfo=pytz.utc)
    # convert it to tz
    tz = pytz.timezone('UTC')
    dt = utc_dt.astimezone(tz)
    return dt.strftime('%Y-%m-%d %H:%M:%S %Z%z')


def db_update_event(resource_id, event_data):
    # Read DB if the resource data is already persisted. If exists update record
    documents = mongo_client.read({'_id': resource_id})
    #mongo_client.find({"events": {"$elemMatch": {"time_stamp": "red"}}}, {"shapes.color": 1})
    if documents:
        events = event_data['events']
        for event in events:
            print(event)
            print(event['time'])
            time_stamp = convert_posix_to_string(event['time'])
            updated_event_data = {"time_stamp": time_stamp,
                                  "Action": event['Action'],
                                  "event": event['event'],
                                  "exitCode": event['exitCode']
                                  }

        for document in documents:
            events = document['events']
            pre_existing_event_status = False
            for event in events:
                if event == updated_event_data:
                    pre_existing_event_status = True
                    break
                else:
                    pre_existing_event_status = False
                    continue
            if not pre_existing_event_status:
                print("New record found updating the events")
                update = mongo_client.update_array(resource_id, "events", updated_event_data, "time_stamp")


resource_id = "51b2ce1979e811a5cfe6381188b76b4faa89a524c11e13639e03061588bb349d"
db_update_event(resource_id, event_data)

